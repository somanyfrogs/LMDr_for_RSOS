// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <vector>
#include <type_traits>
#include <boost/random.hpp>
#include <boost/random/normal_distribution.hpp>
#include <boost/math/quadrature/trapezoidal.hpp>
#include <Eigen/Dense>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace std;
using namespace boost;
using namespace Eigen;
using namespace Rcpp;
using namespace RcppEigen;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// getPred
VectorXd getPred(const MatrixXd& C, const MatrixXd& X);
RcppExport SEXP _andsr_getPred(SEXP CSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(getPred(C, X));
    return rcpp_result_gen;
END_RCPP
}
// getRMSE
double getRMSE(const VectorXd& v1, const VectorXd& v2);
RcppExport SEXP _andsr_getRMSE(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const VectorXd& >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(getRMSE(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// getMAE
double getMAE(const VectorXd& v1, const VectorXd& v2);
RcppExport SEXP _andsr_getMAE(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const VectorXd& >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(getMAE(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// getRho
double getRho(const VectorXd& v1, const VectorXd& v2);
RcppExport SEXP _andsr_getRho(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const VectorXd& >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< const VectorXd& >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(getRho(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// getNEDist
MatrixXd getNEDist(const MatrixXd& X);
RcppExport SEXP _andsr_getNEDist(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(getNEDist(X));
    return rcpp_result_gen;
END_RCPP
}
// getGeodesDist
Eigen::MatrixXd getGeodesDist(const Eigen::MatrixXd& dmat, size_t k);
RcppExport SEXP _andsr_getGeodesDist(SEXP dmatSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< size_t >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(getGeodesDist(dmat, k));
    return rcpp_result_gen;
END_RCPP
}
// getLMDist
MatrixXd getLMDist(const MatrixXd& X, const MatrixXd& theta);
RcppExport SEXP _andsr_getLMDist(SEXP XSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(getLMDist(X, theta));
    return rcpp_result_gen;
END_RCPP
}
// getOptHT
size_t getOptHT(const VectorXd& sv, size_t m, size_t n);
RcppExport SEXP _andsr_getOptHT(SEXP svSEXP, SEXP mSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const VectorXd& >::type sv(svSEXP);
    Rcpp::traits::input_parameter< size_t >::type m(mSEXP);
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(getOptHT(sv, m, n));
    return rcpp_result_gen;
END_RCPP
}
// smapSVD
MatrixXd smapSVD(const MatrixXd& X, const RowVectorXd& y, const MatrixXd& wmat);
RcppExport SEXP _andsr_smapSVD(SEXP XSEXP, SEXP ySEXP, SEXP wmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const RowVectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type wmat(wmatSEXP);
    rcpp_result_gen = Rcpp::wrap(smapSVD(X, y, wmat));
    return rcpp_result_gen;
END_RCPP
}
// smapRidge
MatrixXd smapRidge(const MatrixXd& X, const RowVectorXd& y, const MatrixXd& wmat, double lambda);
RcppExport SEXP _andsr_smapRidge(SEXP XSEXP, SEXP ySEXP, SEXP wmatSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const RowVectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type wmat(wmatSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(smapRidge(X, y, wmat, lambda));
    return rcpp_result_gen;
END_RCPP
}
// lmdSmplx
VectorXd lmdSmplx(const MatrixXd& X, const RowVectorXd& y, const MatrixXd& dmat, const vector<size_t>& idxLib, const vector<size_t>& idxPrd, size_t nns);
RcppExport SEXP _andsr_lmdSmplx(SEXP XSEXP, SEXP ySEXP, SEXP dmatSEXP, SEXP idxLibSEXP, SEXP idxPrdSEXP, SEXP nnsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const RowVectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< const vector<size_t>& >::type idxLib(idxLibSEXP);
    Rcpp::traits::input_parameter< const vector<size_t>& >::type idxPrd(idxPrdSEXP);
    Rcpp::traits::input_parameter< size_t >::type nns(nnsSEXP);
    rcpp_result_gen = Rcpp::wrap(lmdSmplx(X, y, dmat, idxLib, idxPrd, nns));
    return rcpp_result_gen;
END_RCPP
}
// lmdSMap
MatrixXd lmdSMap(const MatrixXd& X, const RowVectorXd& y, const vector<size_t>& idxLib, const vector<size_t>& idxPrd, int method, const MatrixXd& theta, double lambda);
RcppExport SEXP _andsr_lmdSMap(SEXP XSEXP, SEXP ySEXP, SEXP idxLibSEXP, SEXP idxPrdSEXP, SEXP methodSEXP, SEXP thetaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const RowVectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const vector<size_t>& >::type idxLib(idxLibSEXP);
    Rcpp::traits::input_parameter< const vector<size_t>& >::type idxPrd(idxPrdSEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(lmdSMap(X, y, idxLib, idxPrd, method, theta, lambda));
    return rcpp_result_gen;
END_RCPP
}
// funcTPSA
List funcTPSA(int gSeed, size_t threadNo, size_t iterLim, size_t tsLength, int criterion, int method, int diag, const vector<double>& sigmas, const vector<double>& temps, const MatrixXd& X, const RowVectorXd& y, const vector<size_t>& idxLib, const vector<size_t>& idxPrd);
RcppExport SEXP _andsr_funcTPSA(SEXP gSeedSEXP, SEXP threadNoSEXP, SEXP iterLimSEXP, SEXP tsLengthSEXP, SEXP criterionSEXP, SEXP methodSEXP, SEXP diagSEXP, SEXP sigmasSEXP, SEXP tempsSEXP, SEXP XSEXP, SEXP ySEXP, SEXP idxLibSEXP, SEXP idxPrdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type gSeed(gSeedSEXP);
    Rcpp::traits::input_parameter< size_t >::type threadNo(threadNoSEXP);
    Rcpp::traits::input_parameter< size_t >::type iterLim(iterLimSEXP);
    Rcpp::traits::input_parameter< size_t >::type tsLength(tsLengthSEXP);
    Rcpp::traits::input_parameter< int >::type criterion(criterionSEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< int >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< const vector<double>& >::type sigmas(sigmasSEXP);
    Rcpp::traits::input_parameter< const vector<double>& >::type temps(tempsSEXP);
    Rcpp::traits::input_parameter< const MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const RowVectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const vector<size_t>& >::type idxLib(idxLibSEXP);
    Rcpp::traits::input_parameter< const vector<size_t>& >::type idxPrd(idxPrdSEXP);
    rcpp_result_gen = Rcpp::wrap(funcTPSA(gSeed, threadNo, iterLim, tsLength, criterion, method, diag, sigmas, temps, X, y, idxLib, idxPrd));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_andsr_getPred", (DL_FUNC) &_andsr_getPred, 2},
    {"_andsr_getRMSE", (DL_FUNC) &_andsr_getRMSE, 2},
    {"_andsr_getMAE", (DL_FUNC) &_andsr_getMAE, 2},
    {"_andsr_getRho", (DL_FUNC) &_andsr_getRho, 2},
    {"_andsr_getNEDist", (DL_FUNC) &_andsr_getNEDist, 1},
    {"_andsr_getGeodesDist", (DL_FUNC) &_andsr_getGeodesDist, 2},
    {"_andsr_getLMDist", (DL_FUNC) &_andsr_getLMDist, 2},
    {"_andsr_getOptHT", (DL_FUNC) &_andsr_getOptHT, 3},
    {"_andsr_smapSVD", (DL_FUNC) &_andsr_smapSVD, 3},
    {"_andsr_smapRidge", (DL_FUNC) &_andsr_smapRidge, 4},
    {"_andsr_lmdSmplx", (DL_FUNC) &_andsr_lmdSmplx, 6},
    {"_andsr_lmdSMap", (DL_FUNC) &_andsr_lmdSMap, 7},
    {"_andsr_funcTPSA", (DL_FUNC) &_andsr_funcTPSA, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_andsr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
